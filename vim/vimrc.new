" All system-wide defaults are set in $VIMRUNTIME/debian.vim (usually just
" /usr/share/vim/vimcurrent/debian.vim) and sourced by the call to :runtime
" you can find below.  If you wish to change any of those settings, you should
" do it in this file (/etc/vim/vimrc), since debian.vim will be overwritten
" everytime an upgrade of the vim packages is performed.  It is recommended to
" make changes after sourcing debian.vim since it alters the value of the
" 'compatible' option.

" This line should not be removed as it ensures that various options are
" properly set to work with the Vim-related packages available in Debian.
runtime! debian.vim


" PERSONAL CONFIGURATION {{{

" = Documentation = {{{
" http://vimcasts.org	=>	Video tutorial
" http://stevelosh.com/blog/2010/09/coming-home-to-vim/	=>	.vimrc model
" http://vimdoc.sourceforge.net/htmldoc/	=>	vim doc
" Use ':help <command>'

" }}} 

" = Pathogen plugin = {{{
	call pathogen#infect()

" }}}
" = General settings = {{{
	set encoding=utf-8					" Character encoding
	set showcmd							" Show (partial) command in status line
	set autowrite						" Automatically save before commands like :next and :make
	set mouse=a							" Enable mouse usage (all modes)
	set nonumber						" Print the line number in front of each line
	set backupdir=~/.vim/tmp/backup//	" Backups directory
	set directory=~/.vim/tmp/swap//		" Swap files directory
	set backup							" Enable backups
	set noswapfile						" Disable Swap files
	set virtualedit+=block				" Allow virtual editing in Visual block mode

	let mapleader = ","					" Map <leader> shortcut
	au FocusLost * :wa					" Save when losing focus

" }}}
" = Buffers & Tabs = {{{
	set hidden					" Hide buffers when they are abandoned

	" Buffer navigation
	map <C-h> <C-w>h			" Move left
	map <C-j> <C-w>j			" Move down
	map <C-k> <C-w>k			" Move up
	map <C-l> <C-w>l			" Move right
	noremap <leader>v <C-w>v	" New vertical split
	noremap <leader>s <C-w>s	" New horizontal split
	" Tabs navigation
	map <S-l> gt				" Next tab
	map <S-h> gT				" Previous tab
	map <S-k> :tabnew<CR>		" New tab
	map <S-j> :tabc<CR>			" Close tab

	" Jump to the last position when reopening a file
	au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
	" Resize splits when the window is resized
	au VimResized * :wincmd =

" }}}
" = Indentation = {{{
	set tabstop=4
	set shiftwidth=4
	set softtabstop=4
	set noexpandtab
	set listchars=tab:▸\ ,eol:¬,extends:❯,precedes:❮ " Use the same symbols as TextMate for tabstops and EOLs
	set showbreak=↪		" String to put at the start of lines that have been wrapped

	" Shortcut to rapidly toggle `set list`
	nmap <leader>l :set list!<CR>
	" Bind '_$' to delete ending lines whitespaces
	nmap _$ :call Preserve("%s/\\s\\+$//e")<CR>
	" Visual mode indentation
	vmap > >gv
	vmap < <gv

" }}}
" = Folding = {{{
	set foldlevelstart=0	" Start with all folds closed

	" Space to toggle folds.
	nnoremap <Space> za
	vnoremap <Space> za

	" Foldmethod according to filetype
	au FileType vim setlocal foldmethod=marker

" }}}
" = Syntax highlighting = {{{
	syntax enable
	set background=dark
	set t_Co=16
	let g:solarized_termcolors=16
	colorscheme solarized

	set showmatch		" Show matching brackets.
	set cursorline		" Highlight the screen line of the cursor

" }}}
" = Search = {{{
	set ignorecase		" Do case insensitive matching
	set smartcase		" Do smart case matching
	set incsearch		" Incremental search

	map <tab> %			" Go to next bracket

" }}}
" = Filetypes preferences = {{{
	" Only do this part when compiled with support for autocommands
	if has("autocmd")
		" Enable file type detection
		filetype on
		" Load indentation rules and plugins according to the filetype
		filetype plugin indent on

		" Customisations based on house-style (arbitrary)
		autocmd FileType html setlocal ts=2 sts=2 sw=2 noexpandtab
		autocmd FileType css setlocal ts=2 sts=2 sw=2 noexpandtab
	endif

" }}}
" = Functions = {{{
	" Save the 'state' and execute a command before restoring it
	function! Preserve(command)
		" Preparation: save last search, and cursor position.
		let _s=@/
		let l = line(".")
		let c = col(".")
		" Do the business:
		execute a:command
		" Clean up: restore previous search history, and cursor position
		let @/=_s
		call cursor(l, c)
	endfunction

" }}}

" }}}

" Source a global configuration file if available
if filereadable("/etc/vim/vimrc.local")
  source /etc/vim/vimrc.local
endif

